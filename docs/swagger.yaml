basePath: /localhost:8000/
definitions:
  api_errors.ApiError:
    properties:
      code:
        type: integer
      error_message:
        type: string
    type: object
  api_errors.ProductParams:
    properties:
      description:
        description: Nullable description
        type: string
      name:
        type: string
      price:
        type: string
      stock:
        type: integer
    required:
    - name
    - price
    - stock
    type: object
  api_errors.ProductResponse:
    properties:
      created_at:
        type: string
      description:
        description: Nullable description
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        description: Now a float64
        type: number
      stock:
        type: integer
      updated_at:
        type: string
    type: object
  api_errors.UserParams:
    properties:
      email:
        type: string
      password:
        type: string
      role:
        enum:
        - admin
        - user
        type: string
      username:
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  api_errors.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  db.Order:
    properties:
      created_at:
        type: string
      id:
        type: integer
      status:
        type: string
      total_amount:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
info:
  contact: {}
  description: This is my first version API for an ecommerce simple model.
  title: Ecommerca Backend Application
  version: "1.0"
paths:
  /admin/orders/{id}/cancel:
    post:
      description: Cancel an order (admin only)
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Success response" // No need to change this if ProductResponse
            is correctly defined
          schema:
            $ref: '#/definitions/api_errors.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_errors.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api_errors.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_errors.ApiError'
      security:
      - BearerAuth: []
      summary: Cancel Order
      tags:
      - Orders
  /admin/orders/{id}/status:
    patch:
      consumes:
      - application/json
      description: Update the status of an order (admin only)
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: New Order Status
        in: body
        name: status
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Updated order status" // Corrected reference
          schema:
            $ref: '#/definitions/db.Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_errors.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api_errors.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_errors.ApiError'
      security:
      - BearerAuth: []
      summary: Update Order Status
      tags:
      - Orders
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login Credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api_errors.UserParams'
      produces:
      - application/json
      responses:
        "200":
          description: Token response
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_errors.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_errors.ApiError'
      summary: User Login
      tags:
      - Users
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user (admin registration requires admin privileges)
      parameters:
      - description: Registration Details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api_errors.UserParams'
      produces:
      - application/json
      responses:
        "201":
          description: Successful registration
          schema:
            $ref: '#/definitions/api_errors.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_errors.ApiError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_errors.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api_errors.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_errors.ApiError'
      summary: User Registration
      tags:
      - Users
  /orders:
    get:
      description: Retrieve paginated orders for the authenticated user
      parameters:
      - default: 10
        description: Number of orders to retrieve
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of orders" // Corrected reference for array of db.Order
          schema:
            items:
              $ref: '#/definitions/db.Order'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_errors.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_errors.ApiError'
      security:
      - BearerAuth: []
      summary: List User Orders
      tags:
      - Orders
    post:
      consumes:
      - application/json
      description: Create a new order with order items
      parameters:
      - description: Order Creation Details
        in: body
        name: order
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created order" // Corrected reference
          schema:
            $ref: '#/definitions/db.Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_errors.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_errors.ApiError'
      security:
      - BearerAuth: []
      summary: Create Order
      tags:
      - Orders
  /products:
    get:
      description: Retrieve paginated list of products
      parameters:
      - default: 10
        description: Number of products to retrieve
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_errors.ProductResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_errors.ApiError'
      security:
      - BearerAuth: []
      summary: List Products
      tags:
      - Products
  /products/{id}:
    delete:
      description: Delete a product by ID (admin only)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_errors.ApiError'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_errors.ApiError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api_errors.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_errors.ApiError'
      security:
      - BearerAuth: []
      summary: Delete Product
      tags:
      - Products
    get:
      description: Retrieve a specific product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_errors.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_errors.ApiError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api_errors.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_errors.ApiError'
      security:
      - BearerAuth: []
      summary: Get Product
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update an existing product (admin only)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product Update Details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/api_errors.ProductParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_errors.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_errors.ApiError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api_errors.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_errors.ApiError'
      security:
      - BearerAuth: []
      summary: Update Product
      tags:
      - Products
  /products/createProduct:
    post:
      consumes:
      - application/json
      description: Create a new product (admin only)
      parameters:
      - description: Product Details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/api_errors.ProductParams'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api_errors.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_errors.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_errors.ApiError'
      security:
      - BearerAuth: []
      summary: Create Product
      tags:
      - Products
  /users:
    get:
      description: Retrieve a list of users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api_errors.UserResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_errors.ApiError'
      security:
      - BearerAuth: []
      summary: List Users
      tags:
      - Users
  /users/{id}:
    get:
      description: Retrieve a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_errors.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api_errors.ApiError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api_errors.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_errors.ApiError'
      security:
      - BearerAuth: []
      summary: Get User By ID
      tags:
      - Users
  /users/me:
    get:
      description: Retrieve details of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_errors.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api_errors.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api_errors.ApiError'
      security:
      - BearerAuth: []
      summary: Get Logged-In User
      tags:
      - Users
swagger: "2.0"
